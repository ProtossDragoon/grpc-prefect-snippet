# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from gps.proto import gps_pb2 as gps_dot_proto_dot_gps__pb2


class EvaluationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvalFromServerA = channel.unary_unary(
                '/gps.EvaluationService/EvalFromServerA',
                request_serializer=gps_dot_proto_dot_gps__pb2.Request.SerializeToString,
                response_deserializer=gps_dot_proto_dot_gps__pb2.Response.FromString,
                )
        self.EvalFromServerB = channel.unary_unary(
                '/gps.EvaluationService/EvalFromServerB',
                request_serializer=gps_dot_proto_dot_gps__pb2.Request.SerializeToString,
                response_deserializer=gps_dot_proto_dot_gps__pb2.Response.FromString,
                )


class EvaluationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EvalFromServerA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvalFromServerB(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EvaluationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EvalFromServerA': grpc.unary_unary_rpc_method_handler(
                    servicer.EvalFromServerA,
                    request_deserializer=gps_dot_proto_dot_gps__pb2.Request.FromString,
                    response_serializer=gps_dot_proto_dot_gps__pb2.Response.SerializeToString,
            ),
            'EvalFromServerB': grpc.unary_unary_rpc_method_handler(
                    servicer.EvalFromServerB,
                    request_deserializer=gps_dot_proto_dot_gps__pb2.Request.FromString,
                    response_serializer=gps_dot_proto_dot_gps__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gps.EvaluationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EvaluationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EvalFromServerA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gps.EvaluationService/EvalFromServerA',
            gps_dot_proto_dot_gps__pb2.Request.SerializeToString,
            gps_dot_proto_dot_gps__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvalFromServerB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gps.EvaluationService/EvalFromServerB',
            gps_dot_proto_dot_gps__pb2.Request.SerializeToString,
            gps_dot_proto_dot_gps__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
